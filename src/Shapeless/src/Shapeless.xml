<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Shapeless</name>
    </assembly>
    <members>
        <member name="T:Shapeless.Clay">
            <summary>
                流变对象
            </summary>
            <summary>
                流变对象
            </summary>
            <summary>
                流变对象
            </summary>
            <summary>
                流变对象
            </summary>
            <summary>
                流变对象
            </summary>
            <remarks>
                <para>为最小 API 提供模型绑定。</para>
                <para>参考文献：https://learn.microsoft.com/zh-cn/aspnet/core/fundamentals/minimal-apis/parameter-binding?view=aspnetcore-9.0#custom-binding。</para>
            </remarks>
            <summary>
                流变对象
            </summary>
        </member>
        <member name="M:Shapeless.Clay.#ctor(System.Text.Json.Nodes.JsonNode,Shapeless.ClayOptions)">
            <summary>
                <inheritdoc cref="T:Shapeless.Clay" />
            </summary>
            <param name="jsonNode">
                <see cref="T:System.Text.Json.Nodes.JsonNode" />
            </param>
            <param name="options">
                <see cref="T:Shapeless.ClayOptions" />
            </param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="P:Shapeless.Clay.Options">
            <summary>
                <inheritdoc cref="T:Shapeless.ClayOptions" />
            </summary>
        </member>
        <member name="P:Shapeless.Clay.JsonCanvas">
            <summary>
                JSON 格式的画布
            </summary>
            <remarks>用于作为 <see cref="T:Shapeless.Clay" /> 的核心数据容器。</remarks>
        </member>
        <member name="P:Shapeless.Clay.DelegateMap">
            <summary>
                单一对象自定义委托字典
            </summary>
        </member>
        <member name="M:Shapeless.Clay.GetValue(System.Object)">
            <summary>
                根据标识符获取值
            </summary>
            <param name="identifier">标识符，可以是键（字符串）或索引（整数）或索引运算符（Index）或范围运算符（Range）</param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.SetValue(System.Object,System.Object,System.Boolean)">
            <summary>
                根据标识符设置值
            </summary>
            <param name="identifier">标识符，可以是键（字符串）或索引（整数）或索引运算符（Index）或范围运算符（Range）</param>
            <param name="value">值</param>
            <param name="insert">是否作为在指定位置插入</param>
        </member>
        <member name="M:Shapeless.Clay.RemoveValue(System.Object)">
            <summary>
                根据标识符移除值
            </summary>
            <param name="identifier">标识符，可以是键（字符串）或索引（整数）或索引运算符（Index）或范围运算符（Range）</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.GetNodeFromObject(System.Object)">
            <summary>
                根据键获取 <see cref="T:System.Text.Json.Nodes.JsonNode" /> 节点
            </summary>
            <param name="key">键</param>
            <returns>
                <see cref="T:System.Text.Json.Nodes.JsonNode" />
            </returns>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:Shapeless.Clay.GetNodeFromArray(System.Object)">
            <summary>
                根据索引获取 <see cref="T:System.Text.Json.Nodes.JsonNode" /> 节点
            </summary>
            <param name="index">索引</param>
            <returns>
                <see cref="T:System.Text.Json.Nodes.JsonNode" />
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Shapeless.Clay.SetNodeInObject(System.Object,System.Object)">
            <summary>
                根据键设置 <see cref="T:System.Text.Json.Nodes.JsonNode" /> 节点
            </summary>
            <param name="key">键</param>
            <param name="value">属性值</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Shapeless.Clay.SetNodeInArray(System.Object,System.Object,System.Boolean)">
            <summary>
                根据索引设置 <see cref="T:System.Text.Json.Nodes.JsonNode" /> 节点
            </summary>
            <param name="index">索引</param>
            <param name="value">元素值</param>
            <param name="insert">是否作为在指定位置插入</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Shapeless.Clay.RemoveNodeFromObject(System.Object)">
            <summary>
                根据键删除 <see cref="T:System.Text.Json.Nodes.JsonNode" /> 节点
            </summary>
            <param name="key">键</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Shapeless.Clay.RemoveNodeFromArray(System.Object)">
            <summary>
                根据索引删除 <see cref="T:System.Text.Json.Nodes.JsonNode" /> 节点
            </summary>
            <param name="index">索引</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.RemoveNodeFromArrayByRange(System.Range)">
            <summary>
                根据 <see cref="T:System.Range" /> 删除 <see cref="T:System.Text.Json.Nodes.JsonNode" /> 节点
            </summary>
            <param name="range">
                <see cref="T:System.Range" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.TryGetDelegate(System.Object,System.Delegate@)">
            <summary>
                尝试根据键获取委托
            </summary>
            <param name="key">键</param>
            <param name="delegate">
                <see cref="T:System.Delegate" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.SerializeToNode(System.Object,Shapeless.ClayOptions)">
            <summary>
                将对象序列化成 <see cref="T:System.Text.Json.Nodes.JsonNode" /> 实例
            </summary>
            <param name="obj">
                <see cref="T:System.Object" />
            </param>
            <param name="options">
                <see cref="T:Shapeless.ClayOptions" />
            </param>
            <returns>
                <see cref="T:System.Text.Json.Nodes.JsonNode" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.DeserializeNode(System.Text.Json.Nodes.JsonNode,Shapeless.ClayOptions)">
            <summary>
                将 <see cref="T:System.Text.Json.Nodes.JsonNode" /> 转换为对象实例
            </summary>
            <param name="jsonNode">
                <see cref="T:System.Text.Json.Nodes.JsonNode" />
            </param>
            <param name="options">
                <see cref="T:Shapeless.ClayOptions" />
            </param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.ProcessNestedNullPropagationIdentifier(System.Object,System.Boolean,System.Boolean@)">
            <summary>
                处理嵌套带空传播字符 <c>?</c> 的标识符
            </summary>
            <param name="identifier">标识符</param>
            <param name="enable">是否启用处理</param>
            <param name="isUnchanged">标识符是否未被改变</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.ExpandArrayWithNulls(System.Text.Json.Nodes.JsonArray)">
            <summary>
                对数组进行 null 值补位
            </summary>
            <param name="jsonArray">
                <see cref="T:System.Text.Json.Nodes.JsonArray" />
            </param>
        </member>
        <member name="M:Shapeless.Clay.CreateJsonNodeOptions(Shapeless.ClayOptions)">
            <summary>
                创建 <see cref="T:System.Text.Json.Nodes.JsonNode" /> 选项
            </summary>
            <param name="options">
                <see cref="T:Shapeless.ClayOptions" />
            </param>
            <returns>
                <see cref="T:System.Tuple`2" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.TryConvertKeyValueJsonToObject(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNodeOptions,System.Text.Json.JsonDocumentOptions,System.Text.Json.Nodes.JsonObject@)">
            <summary>
                尝试将键值对格式的 JSON 字符串转换为 <see cref="T:System.Text.Json.Nodes.JsonObject" />
            </summary>
            <param name="jsonNode">
                <see cref="T:System.Text.Json.Nodes.JsonNode" />
            </param>
            <param name="jsonNodeOptions">
                <see cref="T:System.Text.Json.Nodes.JsonNodeOptions" />
            </param>
            <param name="jsonDocumentOptions">
                <see cref="T:System.Text.Json.JsonDocumentOptions" />
            </param>
            <param name="jsonObject">
                <see cref="T:System.Text.Json.Nodes.JsonObject" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.AreObjectEqual(Shapeless.Clay,Shapeless.Clay)">
            <summary>
                检查两个单一对象实例是否相等
            </summary>
            <param name="clay1">
                <see cref="T:Shapeless.Clay" />
            </param>
            <param name="clay2">
                <see cref="T:Shapeless.Clay" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.AreArrayEqual(Shapeless.Clay,Shapeless.Clay)">
            <summary>
                检查两个集合或数组实例是否相等
            </summary>
            <param name="clay1">
                <see cref="T:Shapeless.Clay" />
            </param>
            <param name="clay2">
                <see cref="T:Shapeless.Clay" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.ThrowIfOutOfRange(System.Int32,System.Int32)">
            <summary>
                抛出越界的数组索引异常
            </summary>
            <param name="index">索引</param>
            <param name="count">数组长度</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Shapeless.Clay.EnsureLegalArrayIndex(System.Object,System.Int32@)">
            <summary>
                检查数组索引合法性
            </summary>
            <param name="index"><see cref="T:System.Object" /> 类型索引</param>
            <param name="intIndex">整数索引</param>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Shapeless.Clay.EnsureNotReadOnlyBeforeModify">
            <summary>
                确保当前实例不在只读模式下。如果实例是只读的，则抛出异常
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Shapeless.Clay.ThrowIfMethodCalledOnSingleObject(System.String)">
            <summary>
                如果当前实例是单一对象且尝试调用不支持的操作，则抛出异常
            </summary>
            <param name="method">方法名</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Shapeless.Clay.ThrowIfMethodCalledOnArrayCollection(System.String)">
            <summary>
                如果当前实例是集合或数组且尝试调用不支持的操作，则抛出异常
            </summary>
            <param name="method">方法名</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Shapeless.Clay.ThrowIfUnsupportedKeyType(System.Object)">
            <summary>
                如果使用不受支持的键类型，则抛出异常
            </summary>
            <param name="key">键</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="P:Shapeless.Clay.Count">
            <summary>
                获取键或元素的数量
            </summary>
        </member>
        <member name="P:Shapeless.Clay.Length">
            <summary>
                获取键或元素的数量
            </summary>
            <remarks>同 <see cref="P:Shapeless.Clay.Count" />。在某些上下文中，<see cref="P:Shapeless.Clay.Length" /> 可能更常用于数组，<see cref="P:Shapeless.Clay.Count" /> 更常用于集合。</remarks>
        </member>
        <member name="P:Shapeless.Clay.IsEmpty">
            <summary>
                判断是否未定义键、为空集合或为空数组
            </summary>
        </member>
        <member name="P:Shapeless.Clay.Keys">
            <summary>
                获取键或索引的列表
            </summary>
        </member>
        <member name="P:Shapeless.Clay.MemberNames">
            <summary>
                获取单一对象键（属性名）的列表
            </summary>
        </member>
        <member name="P:Shapeless.Clay.Values">
            <summary>
                获取值或元素的列表
            </summary>
        </member>
        <member name="M:Shapeless.Clay.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Shapeless.Clay.GetEnumerator">
            <summary>
                获取循环访问元素的枚举数
            </summary>
            <remarks>
                若为单一对象，则项的类型为 <![CDATA[KeyValuePair<string, dynamic?>]]>。
            </remarks>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerator`1" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.AsEnumerable">
            <summary>
                获取单一对象或集合或数组的迭代器
            </summary>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.AsEnumerateObject">
            <summary>
                获取单一对象的迭代器
            </summary>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.AsEnumerateArray">
            <summary>
                获取集合或数组的迭代器
            </summary>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.ToDictionary">
            <summary>
                将流变对象转换为 <see cref="T:System.Collections.Generic.Dictionary`2" />
            </summary>
            <returns>
                <see cref="T:System.Collections.Generic.Dictionary`2" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.ForEach(System.Action{System.Object})">
            <summary>
                遍历 <see cref="T:Shapeless.Clay" />
            </summary>
            <remarks>
                若为单一对象，则项的类型为 <![CDATA[KeyValuePair<string, dynamic?>]]>。
            </remarks>
            <param name="predicate">自定义委托</param>
        </member>
        <member name="M:Shapeless.Clay.Map``1(System.Func{System.Object,``0})">
            <summary>
                遍历 <see cref="T:Shapeless.Clay" /> 并返回映射后的 <typeparamref name="T" /> 集合
            </summary>
            <remarks>
                若为单一对象，则项的类型为 <![CDATA[KeyValuePair<string, dynamic?>]]>。
            </remarks>
            <param name="selector">选择器</param>
            <typeparam name="T">目标结果类型</typeparam>
            <returns>
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.Filter(System.Func{System.Object,System.Boolean})">
            <summary>
                根据条件过滤并返回新的 <see cref="T:Shapeless.Clay" />
            </summary>
            <remarks>
                若为单一对象，则项的类型为 <![CDATA[KeyValuePair<string, dynamic?>]]>。
            </remarks>
            <param name="predicate">自定义条件委托</param>
            <returns>
                <see cref="T:Shapeless.Clay" />
            </returns>
        </member>
        <member name="E:Shapeless.Clay.Changing">
            <summary>
                数据变更之前事件
            </summary>
        </member>
        <member name="E:Shapeless.Clay.Changed">
            <summary>
                数据变更之后事件
            </summary>
        </member>
        <member name="E:Shapeless.Clay.Removing">
            <summary>
                移除数据之前事件
            </summary>
        </member>
        <member name="E:Shapeless.Clay.Removed">
            <summary>
                移除数据之后事件
            </summary>
        </member>
        <member name="M:Shapeless.Clay.AddEvent(System.String,Shapeless.ClayEventHandler)">
            <summary>
                添加事件
            </summary>
            <param name="eventName">事件名。可选值：Changing、Changed、Removing 和 Removed。</param>
            <param name="handler">
                <see cref="T:Shapeless.ClayEventHandler" />
            </param>
            <returns>
                <see cref="T:Shapeless.Clay" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Shapeless.Clay.AddEvent(System.String,System.Action{System.Object,Shapeless.ClayEventArgs})">
            <summary>
                添加事件
            </summary>
            <param name="eventName">事件名。可选值：Changing、Changed、Removing 和 Removed。</param>
            <param name="handler">
                <see cref="T:Shapeless.ClayEventHandler" />
            </param>
            <returns>
                <see cref="T:Shapeless.Clay" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Shapeless.Clay.OnChanging(System.Object)">
            <summary>
                触发数据变更之前事件
            </summary>
            <param name="identifier">标识符，可以是键（字符串）或索引（整数）或索引运算符（Index）或范围运算符（Range）</param>
        </member>
        <member name="M:Shapeless.Clay.OnChanged(System.Object)">
            <summary>
                触发数据变更之后事件
            </summary>
            <param name="identifier">标识符，可以是键（字符串）或索引（整数）或索引运算符（Index）或范围运算符（Range）</param>
        </member>
        <member name="M:Shapeless.Clay.OnRemoving(System.Object)">
            <summary>
                触发移除数据之前事件
            </summary>
            <param name="identifier">标识符，可以是键（字符串）或索引（整数）或索引运算符（Index）或范围运算符（Range）</param>
        </member>
        <member name="M:Shapeless.Clay.OnRemoved(System.Object)">
            <summary>
                触发移除数据之后事件
            </summary>
            <param name="identifier">标识符，可以是键（字符串）或索引（整数）或索引运算符（Index）或范围运算符（Range）</param>
        </member>
        <member name="M:Shapeless.Clay.TryInvoke(Shapeless.ClayEventHandler,System.Object)">
            <summary>
                尝试执行事件处理程序
            </summary>
            <param name="handler">
                <see cref="T:Shapeless.ClayEventHandler" />
            </param>
            <param name="identifier">标识符，可以是键（字符串）或索引（整数）或索引运算符（Index）或范围运算符（Range）</param>
        </member>
        <member name="F:Shapeless.Clay._jsonResultType">
            <summary>
                初始化 <c>Microsoft.AspNetCore.Mvc.JsonResult</c> 类型
            </summary>
        </member>
        <member name="M:Shapeless.Clay.#ctor(Shapeless.ClayOptions)">
            <summary>
                <inheritdoc cref="T:Shapeless.Clay" />
            </summary>
            <param name="options">
                <see cref="T:Shapeless.ClayOptions" />
            </param>
        </member>
        <member name="M:Shapeless.Clay.#ctor(Shapeless.ClayType,Shapeless.ClayOptions)">
            <summary>
                <inheritdoc cref="T:Shapeless.Clay" />
            </summary>
            <param name="clayType">
                <see cref="T:Shapeless.ClayType" />
            </param>
            <param name="options">
                <see cref="T:Shapeless.ClayOptions" />
            </param>
        </member>
        <member name="P:Shapeless.Clay.Item(System.Object)">
            <summary>
                索引
            </summary>
            <param name="identifier">标识符，可以是键（字符串）或索引（整数）或索引运算符（Index）或范围运算符（Range）</param>
        </member>
        <member name="P:Shapeless.Clay.Item(System.Range)">
            <summary>
                <see cref="T:System.Range" /> 索引
            </summary>
            <remarks>截取 <see cref="T:Shapeless.Clay" /> 并返回新的 <see cref="T:Shapeless.Clay" />。</remarks>
            <param name="range">
                <see cref="T:System.Range" />
            </param>
        </member>
        <member name="P:Shapeless.Clay.IsObject">
            <summary>
                判断是否为单一对象
            </summary>
        </member>
        <member name="P:Shapeless.Clay.IsArray">
            <summary>
                判断是否为集合或数组
            </summary>
        </member>
        <member name="P:Shapeless.Clay.Type">
            <summary>
                获取流变对象的基本类型
            </summary>
        </member>
        <member name="P:Shapeless.Clay.IsReadOnly">
            <summary>
                判断是否为只读模式
            </summary>
        </member>
        <member name="M:Shapeless.Clay.Equals(Shapeless.Clay)">
            <inheritdoc />
        </member>
        <member name="M:Shapeless.Clay.ToString(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:Shapeless.Clay.Deconstruct(System.Object@,System.Collections.Generic.IEnumerable{System.Object}@)">
            <summary>
                解构函数
            </summary>
            <param name="clay">dynamic 类型的 <see cref="T:Shapeless.Clay" /></param>
            <param name="enumerableClay">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </param>
        </member>
        <member name="M:Shapeless.Clay.Deconstruct(System.Object@,System.Collections.Generic.IEnumerable{System.Object}@,Shapeless.Clay@)">
            <summary>
            </summary>
            <param name="clay">dynamic 类型的 <see cref="T:Shapeless.Clay" /></param>
            <param name="enumerableClay">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />
            </param>
            <param name="rawClay">
                <see cref="T:Shapeless.Clay" />
            </param>
        </member>
        <member name="M:Shapeless.Clay.EmptyObject(Shapeless.ClayOptions)">
            <summary>
                创建空的单一对象
            </summary>
            <param name="options">
                <see cref="T:Shapeless.ClayOptions" />
            </param>
            <returns>
                <see cref="T:Shapeless.Clay" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.EmptyArray(Shapeless.ClayOptions)">
            <summary>
                创建空的集合或数组
            </summary>
            <param name="options">
                <see cref="T:Shapeless.ClayOptions" />
            </param>
            <returns>
                <see cref="T:Shapeless.Clay" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.Parse(System.Object,Shapeless.ClayOptions)">
            <summary>
                将对象转换为 <see cref="T:Shapeless.Clay" /> 实例
            </summary>
            <param name="obj">
                <see cref="T:System.Object" />
            </param>
            <param name="options">
                <see cref="T:Shapeless.ClayOptions" />
            </param>
            <returns>
                <see cref="T:Shapeless.Clay" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.Parse(System.Object,System.Action{Shapeless.ClayOptions})">
            <summary>
                将对象转换为 <see cref="T:Shapeless.Clay" /> 实例
            </summary>
            <param name="obj">
                <see cref="T:System.Object" />
            </param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Shapeless.Clay" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.Parse(System.Text.Json.Utf8JsonReader@,Shapeless.ClayOptions)">
            <summary>
                将 <see cref="T:System.Text.Json.Utf8JsonReader" /> 转换为 <see cref="T:Shapeless.Clay" /> 实例
            </summary>
            <param name="utf8JsonReader">
                <see cref="T:System.Text.Json.Utf8JsonReader" />
            </param>
            <param name="options">
                <see cref="T:Shapeless.ClayOptions" />
            </param>
            <returns>
                <see cref="T:Shapeless.Clay" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.Parse(System.Text.Json.Utf8JsonReader@,System.Action{Shapeless.ClayOptions})">
            <summary>
                将 <see cref="T:System.Text.Json.Utf8JsonReader" /> 转换为 <see cref="T:Shapeless.Clay" /> 实例
            </summary>
            <param name="utf8JsonReader">
                <see cref="T:System.Text.Json.Utf8JsonReader" />
            </param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Shapeless.Clay" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.ParseFromFile(System.String,Shapeless.ClayOptions)">
            <summary>
                从文件中读取数据并转换为 <see cref="T:Shapeless.Clay" /> 实例
            </summary>
            <param name="path">文件路径</param>
            <param name="options">
                <see cref="T:Shapeless.ClayOptions" />
            </param>
            <returns>
                <see cref="T:Shapeless.Clay" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.ParseFromFile(System.String,System.Action{Shapeless.ClayOptions})">
            <summary>
                从文件中读取数据并转换为 <see cref="T:Shapeless.Clay" /> 实例
            </summary>
            <param name="path">文件路径</param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Shapeless.Clay" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.Contains(System.Object)">
            <summary>
                检查标识符是否定义
            </summary>
            <param name="identifier">标识符，可以是键（字符串）或索引（整数）或索引运算符（Index）或范围运算符（Range）</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.IsDefined(System.Object)">
            <summary>
                检查标识符是否定义
            </summary>
            <remarks>兼容旧版本粘土对象。</remarks>
            <param name="identifier">标识符，可以是键（字符串）或索引（整数）或索引运算符（Index）或范围运算符（Range）</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.HasProperty(System.String)">
            <summary>
                检查属性（键）是否定义
            </summary>
            <param name="propertyName">属性名（键）</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.IndexOf(System.Object)">
            <summary>
                获取集合或数组中指定项（元素）的索引
            </summary>
            <param name="value">项（元素）</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.Get(System.Object)">
            <summary>
                根据标识符获取值
            </summary>
            <param name="identifier">标识符，可以是键（字符串）或索引（整数）或索引运算符（Index）或范围运算符（Range）</param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.Get(System.Range)">
            <summary>
                截取 <see cref="T:Shapeless.Clay" /> 并返回新的 <see cref="T:Shapeless.Clay" />
            </summary>
            <param name="range">
                <see cref="T:System.Range" />
            </param>
            <returns>
                <see cref="T:Shapeless.Clay" />
            </returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Shapeless.Clay.Get(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
                根据标识符获取目标类型的值
            </summary>
            <param name="identifier">标识符，可以是键（字符串）或索引（整数）或索引运算符（Index）或范围运算符（Range）</param>
            <param name="resultType">转换的目标类型</param>
            <param name="jsonSerializerOptions">
                <see cref="T:System.Text.Json.JsonSerializerOptions" />
            </param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:Shapeless.Clay.Get``1(System.Object,System.Text.Json.JsonSerializerOptions)">
            <summary>
                根据标识符获取目标类型的值
            </summary>
            <param name="identifier">标识符，可以是键（字符串）或索引（整数）或索引运算符（Index）或范围运算符（Range）</param>
            <param name="jsonSerializerOptions">
                <see cref="T:System.Text.Json.JsonSerializerOptions" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.PathValue(System.String)">
            <summary>
                根据路径获取值
            </summary>
            <remarks>不支持获取自定义委托。</remarks>
            <param name="path">带路径的标识符</param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.PathValue(System.String,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
                根据路径获取值
            </summary>
            <remarks>不支持获取自定义委托。</remarks>
            <param name="path">带路径的标识符</param>
            <param name="resultType">转换的目标类型</param>
            <param name="jsonSerializerOptions">
                <see cref="T:System.Text.Json.JsonSerializerOptions" />
            </param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.PathValue``1(System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
                根据路径获取值
            </summary>
            <remarks>不支持获取自定义委托。</remarks>
            <param name="path">带路径的标识符</param>
            <param name="jsonSerializerOptions">
                <see cref="T:System.Text.Json.JsonSerializerOptions" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.FindNode(System.Object)">
            <summary>
                根据标识符查找 <see cref="T:System.Text.Json.Nodes.JsonNode" /> 节点
            </summary>
            <param name="identifier">标识符，可以是键（字符串）或索引（整数）或索引运算符（Index）或范围运算符（Range）</param>
            <returns>
                <see cref="T:System.Text.Json.Nodes.JsonNode" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.Set(System.Object,System.Object)">
            <summary>
                根据标识符设置值
            </summary>
            <param name="identifier">标识符，可以是键（字符串）或索引（整数）或索引运算符（Index）或范围运算符（Range）</param>
            <param name="value">值</param>
        </member>
        <member name="M:Shapeless.Clay.Insert(System.Int32,System.Object)">
            <summary>
                在指定索引处插入项
            </summary>
            <remarks>当 <see cref="P:Shapeless.Clay.IsArray" /> 为 <c>true</c> 时有效。</remarks>
            <param name="index">索引</param>
            <param name="value">值</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Shapeless.Clay.Insert(System.Index,System.Object)">
            <summary>
                在指定索引处插入项
            </summary>
            <remarks>当 <see cref="P:Shapeless.Clay.IsArray" /> 为 <c>true</c> 时有效。</remarks>
            <param name="index">索引</param>
            <param name="value">值</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Shapeless.Clay.InsertRange(System.Int32,System.Object[])">
            <summary>
                在指定索引处批量插入项
            </summary>
            <remarks>当 <see cref="P:Shapeless.Clay.IsArray" /> 为 <c>true</c> 时有效。</remarks>
            <param name="index">索引</param>
            <param name="values">值集合</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Shapeless.Clay.InsertRange(System.Index,System.Object[])">
            <summary>
                在指定索引处批量插入项
            </summary>
            <remarks>当 <see cref="P:Shapeless.Clay.IsArray" /> 为 <c>true</c> 时有效。</remarks>
            <param name="index">索引</param>
            <param name="values">值集合</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Shapeless.Clay.Add(System.Object)">
            <summary>
                在末尾处添加项
            </summary>
            <remarks>当 <see cref="P:Shapeless.Clay.IsArray" /> 为 <c>true</c> 时有效。</remarks>
            <param name="value">值</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Shapeless.Clay.Append(System.Object)">
            <summary>
                在末尾处追加项
            </summary>
            <remarks>当 <see cref="P:Shapeless.Clay.IsArray" /> 为 <c>true</c> 时有效。</remarks>
            <param name="value">值</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Shapeless.Clay.AddRange(System.Object[])">
            <summary>
                在末尾处批量添加项
            </summary>
            <remarks>当 <see cref="P:Shapeless.Clay.IsArray" /> 为 <c>true</c> 时有效。</remarks>
            <param name="values">值集合</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Shapeless.Clay.Push(System.Object)">
            <summary>
                在末尾处添加项
            </summary>
            <remarks>当 <see cref="P:Shapeless.Clay.IsArray" /> 为 <c>true</c> 时有效。</remarks>
            <param name="value">值</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Shapeless.Clay.Pop">
            <summary>
                移除末尾处的项
            </summary>
            <remarks>当 <see cref="P:Shapeless.Clay.IsArray" /> 为 <c>true</c> 时有效。</remarks>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Shapeless.Clay.Reverse(Shapeless.ClayOptions)">
            <summary>
                反转 <see cref="T:Shapeless.Clay" /> 并返回新 <see cref="T:Shapeless.Clay" />
            </summary>
            <returns>
                <see cref="T:Shapeless.Clay" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.Slice(System.Range)">
            <summary>
                截取 <see cref="T:Shapeless.Clay" /> 并返回新的 <see cref="T:Shapeless.Clay" />
            </summary>
            <param name="range">
                <see cref="T:System.Range" />
            </param>
            <returns>
                <see cref="T:Shapeless.Clay" />
            </returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Shapeless.Clay.Slice(System.Index,System.Index)">
            <summary>
                截取 <see cref="T:Shapeless.Clay" /> 并返回新的 <see cref="T:Shapeless.Clay" />
            </summary>
            <param name="start">范围的包含起始索引</param>
            <param name="end">范围的非包含结束索引</param>
            <returns>
                <see cref="T:Shapeless.Clay" />
            </returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Shapeless.Clay.Combine(Shapeless.Clay[])">
            <summary>
                组合多个 <see cref="T:Shapeless.Clay" /> 并返回新 <see cref="T:Shapeless.Clay" />
            </summary>
            <param name="clays">
                <see cref="T:Shapeless.Clay" /> 集合
            </param>
            <returns>
                <see cref="T:Shapeless.Clay" />
            </returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Shapeless.Clay.Extend(System.Object[])">
            <summary>
                拓展属性或项
            </summary>
            <param name="values">值集合</param>
            <returns>
                <see cref="T:Shapeless.Clay" />
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Shapeless.Clay.Remove(System.Object)">
            <summary>
                根据标识符删除数据
            </summary>
            <param name="identifier">标识符，可以是键（字符串）或索引（整数）或索引运算符（Index）或范围运算符（Range）</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.Remove(System.Index,System.Index)">
            <summary>
                根据范围删除数据
            </summary>
            <param name="start">范围的包含起始索引</param>
            <param name="end">范围的非包含结束索引</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Shapeless.Clay.Delete(System.Object)">
            <summary>
                根据标识符删除数据
            </summary>
            <remarks>兼容旧版本粘土对象。</remarks>
            <param name="identifier">标识符，可以是键（字符串）或索引（整数）或索引运算符（Index）或范围运算符（Range）</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.Delete(System.Index,System.Index)">
            <summary>
                根据范围删除数据
            </summary>
            <param name="start">范围的包含起始索引</param>
            <param name="end">范围的非包含结束索引</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Shapeless.Clay.As(System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
                将 <see cref="T:Shapeless.Clay" /> 转换为目标类型
            </summary>
            <param name="resultType">转换的目标类型</param>
            <param name="jsonSerializerOptions">
                <see cref="T:System.Text.Json.JsonSerializerOptions" />
            </param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.As``1(System.Text.Json.JsonSerializerOptions)">
            <summary>
                将 <see cref="T:Shapeless.Clay" /> 转换为目标类型
            </summary>
            <param name="jsonSerializerOptions">
                <see cref="T:System.Text.Json.JsonSerializerOptions" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.DeepClone(Shapeless.ClayOptions)">
            <summary>
                深度克隆
            </summary>
            <remarks>该操作不会复制自定义委托方法。</remarks>
            <param name="options">
                <see cref="T:Shapeless.ClayOptions" />
            </param>
            <returns>
                <see cref="T:Shapeless.Clay" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.Clear">
            <summary>
                清空数据
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Shapeless.Clay.WriteTo(System.Text.Json.Utf8JsonWriter,System.Text.Json.JsonSerializerOptions)">
            <summary>
                写入提供的 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 作为 JSON
            </summary>
            <param name="writer">
                <see cref="T:System.Text.Json.Utf8JsonWriter" />
            </param>
            <param name="jsonSerializerOptions">
                <see cref="T:System.Text.Json.JsonSerializerOptions" />
            </param>
        </member>
        <member name="M:Shapeless.Clay.AsReadOnly">
            <summary>
                设置为只读模式
            </summary>
        </member>
        <member name="M:Shapeless.Clay.AsMutable">
            <summary>
                设置为可变（默认）模式
            </summary>
        </member>
        <member name="M:Shapeless.Clay.ToString(System.String)">
            <summary>
                支持格式化字符串输出
            </summary>
            <param name="format">格式化字符串</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.ToString">
            <inheritdoc />
        </member>
        <member name="M:Shapeless.Clay.ToJsonString(System.Text.Json.JsonSerializerOptions)">
            <summary>
                将 <see cref="T:Shapeless.Clay" /> 输出为 JSON 格式字符串
            </summary>
            <param name="jsonSerializerOptions">
                <see cref="T:System.Text.Json.JsonSerializerOptions" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.ToXmlString(System.Xml.XmlWriterSettings)">
            <summary>
                将 <see cref="T:Shapeless.Clay" /> 输出为 XML 格式字符串
            </summary>
            <param name="xmlWriterSettings">
                <see cref="T:System.Xml.XmlWriterSettings" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.IsClay(System.Type)">
            <summary>
                检查类型是否是 <see cref="T:Shapeless.Clay" /> 类型
            </summary>
            <param name="type">
                <see cref="P:Shapeless.Clay.Type" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.IsClay(System.Object)">
            <summary>
                检查类型是否是 <see cref="T:Shapeless.Clay" /> 类型
            </summary>
            <param name="obj">
                <see cref="T:System.Object" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.KSort(Shapeless.ClayOptions)">
            <summary>
                按照键升序排序并返回新的 <see cref="T:Shapeless.Clay" />
            </summary>
            <param name="options">
                <see cref="T:Shapeless.ClayOptions" />
            </param>
            <returns>
                <see cref="T:Shapeless.Clay" />
            </returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Shapeless.Clay.KRSort(Shapeless.ClayOptions)">
            <summary>
                按照键降序排序并返回新的 <see cref="T:Shapeless.Clay" />
            </summary>
            <param name="options">
                <see cref="T:Shapeless.ClayOptions" />
            </param>
            <returns>
                <see cref="T:Shapeless.Clay" />
            </returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Shapeless.Clay.Rebuilt(Shapeless.ClayOptions)">
            <summary>
                重建 <see cref="T:Shapeless.Clay" /> 实例
            </summary>
            <param name="options">
                <see cref="T:Shapeless.ClayOptions" />
            </param>
            <returns>
                <see cref="T:Shapeless.Clay" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.Rebuilt(System.Action{Shapeless.ClayOptions})">
            <summary>
                重建 <see cref="T:Shapeless.Clay" /> 实例
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Shapeless.Clay" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.IsJsonString(System.String,System.Boolean)">
            <summary>
                检查字符串是否是 JSON 格式
            </summary>
            <param name="input">字符串</param>
            <param name="allowTrailingCommas">是否允许末尾多余逗号。默认值为：<c>false</c>。</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Shapeless.Clay.op_Equality(Shapeless.Clay,Shapeless.Clay)">
            <summary>
                重载 == 运算符
            </summary>
            <param name="left">
                <see cref="T:Shapeless.Clay" />
            </param>
            <param name="right">
                <see cref="T:Shapeless.Clay" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.op_Inequality(Shapeless.Clay,Shapeless.Clay)">
            <summary>
                重载 != 运算符
            </summary>
            <param name="left">
                <see cref="T:Shapeless.Clay" />
            </param>
            <param name="right">
                <see cref="T:Shapeless.Clay" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Shapeless.Clay.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Shapeless.Clay.Object">
            <summary>
                单一对象
            </summary>
        </member>
        <member name="M:Shapeless.Clay.Object.#ctor(Shapeless.ClayOptions)">
            <summary>
                <inheritdoc cref="T:Shapeless.Clay.Object" />
            </summary>
            <param name="options">
                <see cref="T:Shapeless.ClayOptions" />
            </param>
        </member>
        <member name="T:Shapeless.Clay.Array">
            <summary>
                集合或数组
            </summary>
        </member>
        <member name="M:Shapeless.Clay.Array.#ctor(Shapeless.ClayOptions)">
            <summary>
                <inheritdoc cref="T:Shapeless.Clay.Array" />
            </summary>
            <param name="options">
                <see cref="T:Shapeless.ClayOptions" />
            </param>
        </member>
        <member name="F:Shapeless.Clay._bindAsyncMethod">
            <summary>
                初始化 <c>ClayBinder.BindAsync(HttpContext, ParameterInfo)</c> 静态方法
            </summary>
        </member>
        <member name="M:Shapeless.Clay.BindAsync(System.Object,System.Reflection.ParameterInfo)">
            <summary>
                为最小 API 提供模型绑定
            </summary>
            <remarks>由运行时调用。</remarks>
            <param name="httpContext"><c>HttpContext</c> 实例</param>
            <param name="parameter">
                <see cref="T:System.Reflection.ParameterInfo" />
            </param>
            <returns>
                <see cref="T:Shapeless.Clay" />
            </returns>
        </member>
        <member name="F:Shapeless.Clay._getCSharpInvokeMemberBinderTypeArguments">
            <summary>
                获取 <see cref="T:System.Dynamic.InvokeMemberBinder" /> 类型的 <c>TypeArguments</c> 属性访问器
            </summary>
            <remarks>实际上获取的是内部类型 <c>CSharpInvokeMemberBinder</c> 的 <c>TypeArguments</c> 属性访问器。</remarks>
        </member>
        <member name="M:Shapeless.Clay.GetDynamicMemberNames">
            <inheritdoc />
            <remarks>可用于控制序列化时能够被序列化的标识符。</remarks>
        </member>
        <member name="M:Shapeless.Clay.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:Shapeless.Clay.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Shapeless.Clay.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:Shapeless.Clay.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Shapeless.Clay.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:Shapeless.Clay.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:Shapeless.Clay.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:Shapeless.Clay.DynamicInvokeDelegate(System.Delegate,System.Object[],System.Object@)">
            <summary>
                动态调用委托
            </summary>
            <remarks>在第一个参数是 <see cref="T:Shapeless.ClayContext" /> 类型时自动创建并传递 <see cref="T:Shapeless.ClayContext" /> 实例。</remarks>
            <param name="delegate">
                <see cref="T:System.Delegate" />
            </param>
            <param name="args">委托实参数组</param>
            <param name="result">委托调用的结果</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="T:Shapeless.ClayEventHandler">
            <summary>
                流变对象事件委托
            </summary>
        </member>
        <member name="T:Shapeless.ClayType">
            <summary>
                流变对象的基本类型
            </summary>
            <remarks>用于区分是单一对象还是集合或数组形式。</remarks>
        </member>
        <member name="F:Shapeless.ClayType.Object">
            <summary>
                单一对象
            </summary>
            <remarks>缺省值。</remarks>
        </member>
        <member name="F:Shapeless.ClayType.Array">
            <summary>
                集合或数组形式
            </summary>
        </member>
        <member name="T:Shapeless.ClayJsonConverter">
            <summary>
                <see cref="T:Shapeless.Clay" /> JSON 序列化转换器
            </summary>
        </member>
        <member name="M:Shapeless.ClayJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:Shapeless.ClayJsonConverter.Write(System.Text.Json.Utf8JsonWriter,Shapeless.Clay,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:Shapeless.ObjectToClayJsonConverter">
            <summary>
                <see cref="T:System.Object" /> 转 <see cref="T:Shapeless.Clay" /> JSON 序列化转换器
            </summary>
        </member>
        <member name="M:Shapeless.ObjectToClayJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:Shapeless.ObjectToClayJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.Object,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:Shapeless.Core.Converters.Json.DateTimeConverterUsingDateTimeParseAsFallback">
            <summary>
                <see cref="T:System.DateTime" /> JSON 序列化转换器
            </summary>
            <remarks>在不符合 <c>ISO 8601-1:2019</c> 格式的 <see cref="T:System.DateTime" /> 时间使用 <c>DateTime.Parse</c> 作为回退。</remarks>
        </member>
        <member name="M:Shapeless.Core.Converters.Json.DateTimeConverterUsingDateTimeParseAsFallback.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:Shapeless.Core.Converters.Json.DateTimeConverterUsingDateTimeParseAsFallback.Write(System.Text.Json.Utf8JsonWriter,System.DateTime,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:Shapeless.Core.Converters.Json.DateTimeOffsetConverterUsingDateTimeOffsetParseAsFallback">
            <summary>
                <see cref="T:System.DateTimeOffset" /> JSON 序列化转换器
            </summary>
            <remarks>在不符合 <c>ISO 8601-1:2019</c> 格式的 <see cref="T:System.DateTimeOffset" /> 时间使用 <c>DateTimeOffset.Parse</c> 作为回退。</remarks>
        </member>
        <member name="M:Shapeless.Core.Converters.Json.DateTimeOffsetConverterUsingDateTimeOffsetParseAsFallback.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:Shapeless.Core.Converters.Json.DateTimeOffsetConverterUsingDateTimeOffsetParseAsFallback.Write(System.Text.Json.Utf8JsonWriter,System.DateTimeOffset,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:Shapeless.Core.Converters.Json.StringJsonConverter">
            <summary>
                <see cref="T:System.String" /> JSON 序列化转换器
            </summary>
            <remarks>解决 Number 类型和 Boolean 类型转 String 类型时异常。</remarks>
        </member>
        <member name="M:Shapeless.Core.Converters.Json.StringJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:Shapeless.Core.Converters.Json.StringJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.String,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:Shapeless.Core.Extensions.ICollectionExtensions">
            <summary>
                <see cref="T:System.Collections.Generic.ICollection`1" /> 拓展类
            </summary>
        </member>
        <member name="M:Shapeless.Core.Extensions.ICollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
                判断集合是否为空
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="collection">
                <see cref="T:System.Collections.Generic.ICollection`1" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="T:Shapeless.Core.Extensions.JsonExtensions">
            <summary>
                System.Text.Json 拓展类
            </summary>
        </member>
        <member name="M:Shapeless.Core.Extensions.JsonExtensions.As``1(System.Text.Json.Nodes.JsonNode,System.Text.Json.JsonSerializerOptions)">
            <summary>
                将 <see cref="T:System.Text.Json.Nodes.JsonNode" /> 转换为目标类型
            </summary>
            <param name="jsonNode">
                <see cref="T:System.Text.Json.Nodes.JsonNode" />
            </param>
            <param name="jsonSerializerOptions">
                <see cref="T:System.Text.Json.JsonSerializerOptions" />
            </param>
            <typeparam name="TResult">转换的目标类型</typeparam>
            <returns>
                <typeparamref name="TResult" />
            </returns>
        </member>
        <member name="M:Shapeless.Core.Extensions.JsonExtensions.As(System.Text.Json.Nodes.JsonNode,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
                将 <see cref="T:System.Text.Json.Nodes.JsonNode" /> 转换为目标类型
            </summary>
            <param name="jsonNode">
                <see cref="T:System.Text.Json.Nodes.JsonNode" />
            </param>
            <param name="resultType">转换的目标类型</param>
            <param name="jsonSerializerOptions">
                <see cref="T:System.Text.Json.JsonSerializerOptions" />
            </param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
        </member>
        <member name="M:Shapeless.Core.Extensions.JsonExtensions.GetNumericValue(System.Text.Json.Nodes.JsonNode)">
            <summary>
                将 <see cref="T:System.Text.Json.Nodes.JsonNode" /> 转换为数值类型的值
            </summary>
            <param name="jsonNode">
                <see cref="T:System.Text.Json.Nodes.JsonNode" />
            </param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Shapeless.Core.Extensions.JsonExtensions.TransformKeysWithNamingPolicy(System.Text.Json.Nodes.JsonNode,System.Text.Json.JsonNamingPolicy)">
            <summary>
                根据提供的命名策略转换 JSON 节点中的对象键名
            </summary>
            <param name="jsonNode">
                <see cref="T:System.Text.Json.Nodes.JsonNode" />
            </param>
            <param name="jsonNamingPolicy">
                <see cref="T:System.Text.Json.JsonNamingPolicy" />
            </param>
            <returns>
                <see cref="T:System.Text.Json.Nodes.JsonNode" />
            </returns>
        </member>
        <member name="T:Shapeless.Core.Extensions.ObjectExtensions">
            <summary>
                <see cref="T:System.Object" /> 拓展类
            </summary>
        </member>
        <member name="M:Shapeless.Core.Extensions.ObjectExtensions.ObjectToDictionary(System.Object)">
            <summary>
                将对象转换为 <see cref="T:System.Collections.Generic.IDictionary`2" /> 类型对象
            </summary>
            <param name="obj">
                <see cref="T:System.Object" />
            </param>
            <returns>
                <see cref="T:System.Collections.Generic.IDictionary`2" />
            </returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="T:Shapeless.Core.Extensions.StringExtensions">
            <summary>
                <see cref="T:System.String" /> 拓展类
            </summary>
        </member>
        <member name="M:Shapeless.Core.Extensions.StringExtensions.ParseFormatKeyValueString(System.String,System.Char[],System.Nullable{System.Char})">
            <summary>
                解析符合键值对格式的字符串为键值对列表
            </summary>
            <param name="keyValueString">键值对格式的字符串</param>
            <param name="separators">分隔符字符数组</param>
            <param name="trimChar">要删除的前导字符</param>
            <returns>
                <see cref="T:System.Collections.Generic.List`1" />
            </returns>
        </member>
        <member name="T:Shapeless.Core.Extensions.TypeExtensions">
            <summary>
                <see cref="T:System.Type" /> 拓展类
            </summary>
        </member>
        <member name="M:Shapeless.Core.Extensions.TypeExtensions.IsBasicType(System.Type)">
            <summary>
                检查类型是否是基本类型
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Shapeless.Core.Extensions.TypeExtensions.IsKeyValuePair(System.Type)">
            <summary>
                检查类型是否是 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 类型
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Shapeless.Core.Extensions.TypeExtensions.IsKeyValueCollection(System.Type,System.Boolean@)">
            <summary>
                检查类型是否是键值对集合类型
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <param name="isKeyValuePairCollection">是否是 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 集合类型</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Shapeless.Core.Extensions.TypeExtensions.GetKeyValuePairOrJPropertyGetters(System.Type)">
            <summary>
                获取 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 或 <c>Newtonsoft.Json.Linq.JProperty</c> 类型键值属性值访问器
            </summary>
            <param name="keyValuePairType">
                <see cref="T:System.Type" />
            </param>
            <returns>
                <see cref="T:System.Tuple`2" />
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Shapeless.Core.Extensions.TypeExtensions.CreatePropertyGetter(System.Type,System.Reflection.PropertyInfo)">
            <summary>
                创建实例属性值访问器
            </summary>
            <param name="type">
                <see cref="T:System.Type" />
            </param>
            <param name="propertyInfo">
                <see cref="T:System.Reflection.PropertyInfo" />
            </param>
            <returns>
                <see cref="T:System.Func`2" />
            </returns>
        </member>
        <member name="T:Shapeless.Core.Extensions.Utf8JsonReaderExtensions">
            <summary>
                <see cref="T:System.Text.Json.Utf8JsonReader" /> 拓展类
            </summary>
        </member>
        <member name="M:Shapeless.Core.Extensions.Utf8JsonReaderExtensions.GetRawText(System.Text.Json.Utf8JsonReader@)">
            <summary>
                获取 JSON 原始输入数据
            </summary>
            <param name="reader">
                <see cref="T:System.Text.Json.Utf8JsonReader" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="M:Shapeless.Core.Extensions.Utf8JsonReaderExtensions.ConvertRawValueToString(System.Text.Json.Utf8JsonReader)">
            <summary>
                从 <see cref="T:System.Text.Json.Utf8JsonReader" /> 中提取原始值，并将其转换为字符串
            </summary>
            <remarks>支持处理各种类型的原始值（例如数字、布尔值等）。</remarks>
            <param name="reader">
                <see cref="T:System.Text.Json.Utf8JsonReader" />
            </param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="T:Shapeless.Core.Utilities.AliasAsUtility">
            <summary>
                提供别名获取实用方法
            </summary>
        </member>
        <member name="M:Shapeless.Core.Utilities.AliasAsUtility.GetPropertyName(System.Reflection.PropertyInfo,System.Boolean@)">
            <summary>
                获取属性名
            </summary>
            <param name="property">
                <see cref="T:System.Reflection.PropertyInfo" />
            </param>
            <param name="isDefined">是否定义特性</param>
            <returns>
                <see cref="T:System.String" />
            </returns>
        </member>
        <member name="T:Shapeless.Core.Utilities.NetworkUtility">
            <summary>
                提供网络相关的实用方法
            </summary>
        </member>
        <member name="M:Shapeless.Core.Utilities.NetworkUtility.FindAvailableTcpPort">
            <summary>
                查找一个可用的 TCP 端口
            </summary>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="M:Shapeless.Core.Utilities.NetworkUtility.IsPortInUse(System.Int32)">
            <summary>
                检查指定端口是否正在使用
            </summary>
            <remarks>如果端口正在使用则返回 <c>true</c>，否则返回 <c>false</c>。</remarks>
            <param name="port">要检查的端口号。</param>
            <returns>
                <see cref="T:System.Boolean" />
            </returns>
        </member>
        <member name="T:Shapeless.Extensions.ShapelessExtensions">
            <summary>
                流变对象模块拓展类
            </summary>
        </member>
        <member name="M:Shapeless.Extensions.ShapelessExtensions.ToClay(System.Object,Shapeless.ClayOptions)">
            <summary>
                将对象转换为 <see cref="T:Shapeless.Clay" /> 实例
            </summary>
            <param name="obj">
                <see cref="T:System.Object" />
            </param>
            <param name="options">
                <see cref="T:Shapeless.ClayOptions" />
            </param>
            <returns>
                <see cref="T:Shapeless.Clay" />
            </returns>
        </member>
        <member name="M:Shapeless.Extensions.ShapelessExtensions.ToClay(System.Object,System.Action{Shapeless.ClayOptions})">
            <summary>
                将对象转换为 <see cref="T:Shapeless.Clay" /> 实例
            </summary>
            <param name="obj">
                <see cref="T:System.Object" />
            </param>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Shapeless.Clay" />
            </returns>
        </member>
        <member name="T:Shapeless.Helpers">
            <summary>
                流变对象模块帮助类
            </summary>
        </member>
        <member name="M:Shapeless.Helpers.DeserializeNode(System.Text.Json.Nodes.JsonNode,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
                将 <see cref="T:System.Text.Json.Nodes.JsonNode" /> 转换为目标类型
            </summary>
            <param name="jsonNode">
                <see cref="T:System.Text.Json.Nodes.JsonNode" />
            </param>
            <param name="resultType">转换的目标类型</param>
            <param name="jsonSerializerOptions">
                <see cref="T:System.Text.Json.JsonSerializerOptions" />
            </param>
            <returns>
                <see cref="T:System.Object" />
            </returns>
        </member>
        <member name="T:Shapeless.ClayContext">
            <summary>
                流变对象上下文
            </summary>
            <remarks>用于动态调用自定义委托时提供上下文 <see cref="T:Shapeless.Clay" /> 实例。无需外部手动初始化。</remarks>
        </member>
        <member name="M:Shapeless.ClayContext.#ctor(Shapeless.Clay)">
            <summary>
                <inheritdoc cref="T:Shapeless.ClayContext" />
            </summary>
            <param name="current">上下文 <see cref="T:Shapeless.Clay" /> 实例</param>
        </member>
        <member name="P:Shapeless.ClayContext.Current">
            <summary>
                上下文 <see cref="T:Shapeless.Clay" /> 实例
            </summary>
        </member>
        <member name="T:Shapeless.ClayEventArgs">
            <summary>
                <see cref="T:Shapeless.Clay" /> 对象事件参数
            </summary>
        </member>
        <member name="M:Shapeless.ClayEventArgs.#ctor(System.Object,System.Boolean)">
            <summary>
                <inheritdoc cref="T:Shapeless.ClayEventArgs" />
            </summary>
            <param name="identifier">标识符，可以是键（字符串）或索引（整数）或索引运算符（Index）或范围运算符（Range）</param>
            <param name="isFound">指示标识符是否存在</param>
        </member>
        <member name="P:Shapeless.ClayEventArgs.Identifier">
            <summary>
                标识符，可以是键（字符串）或索引（整数）或索引运算符（Index）或范围运算符（Range）
            </summary>
        </member>
        <member name="P:Shapeless.ClayEventArgs.IsFound">
            <summary>
                指示标识符是否存在
            </summary>
        </member>
        <member name="T:Shapeless.Utf8StringWriter">
            <summary>
                <c>UTF-8</c> 格式的 <see cref="T:System.IO.StringWriter" />
            </summary>
        </member>
        <member name="P:Shapeless.Utf8StringWriter.Encoding">
            <inheritdoc />
        </member>
        <member name="T:Shapeless.ClayOptions">
            <summary>
                <see cref="T:Shapeless.Clay" /> 选项
            </summary>
        </member>
        <member name="P:Shapeless.ClayOptions.Default">
            <summary>
                默认 <see cref="T:Shapeless.ClayOptions" /> 实例
            </summary>
        </member>
        <member name="P:Shapeless.ClayOptions.Flexible">
            <summary>
                允许属性名不区分大小写、访问缺失的属性或数组越界的 <see cref="T:Shapeless.ClayOptions" /> 实例
            </summary>
        </member>
        <member name="P:Shapeless.ClayOptions.ScalarValueKey">
            <summary>
                配置用于包裹非对象和非数组类型的键名
            </summary>
        </member>
        <member name="P:Shapeless.ClayOptions.AllowMissingProperty">
            <summary>
                是否允许访问不存在的属性
            </summary>
            <remarks>当 <see cref="P:Shapeless.Clay.IsObject" /> 为 <c>true</c> 时有效。默认值为：<c>false</c>，表示遇到缺失属性时将抛出异常。</remarks>
        </member>
        <member name="P:Shapeless.ClayOptions.AllowIndexOutOfRange">
            <summary>
                是否允许访问越界的数组索引
            </summary>
            <remarks>当 <see cref="P:Shapeless.Clay.IsArray" /> 为 <c>true</c> 时有效。默认值为：<c>false</c>，表示遇到无效索引时将抛出异常。</remarks>
        </member>
        <member name="P:Shapeless.ClayOptions.AutoCreateNestedObjects">
            <summary>
                是否自动创建嵌套的对象实例
            </summary>
            <remarks>
                当 <see cref="P:Shapeless.Clay.IsObject" /> 和 <see cref="P:Shapeless.ClayOptions.AllowMissingProperty" /> 为 <c>true</c> 时有效。默认值为：<c>false</c>
                ，当设置为 <c>true</c> 时，如果尝试访问或设置一个不存在的成员并且索引器带 <c>?</c> 后缀的键时，将自动创建一个新的 <see cref="T:Shapeless.Clay" /> 对象实例。
            </remarks>
        </member>
        <member name="P:Shapeless.ClayOptions.AutoCreateNestedArrays">
            <summary>
                是否自动创建嵌套的数组实例
            </summary>
            <remarks>
                当 <see cref="P:Shapeless.Clay.IsArray" /> 和 <see cref="P:Shapeless.ClayOptions.AutoCreateNestedArrays" /> 为 <c>true</c> 时有效。默认值为：<c>false</c>
                ，当设置为 <c>true</c> 时，如果尝试访问或设置超出数组长度的索引并且索引器带 <c>?</c> 后缀的键时，将自动创建一个新的 <see cref="T:Shapeless.Clay" /> 数组实例。
            </remarks>
        </member>
        <member name="P:Shapeless.ClayOptions.AutoExpandArrayWithNulls">
            <summary>
                是否超出数组长度时自动补位 <c>null</c>
            </summary>
            <remarks>
                当 <see cref="P:Shapeless.Clay.IsArray" /> 和 <see cref="P:Shapeless.ClayOptions.AllowIndexOutOfRange" /> 为 <c>true</c> 时有效。默认值为：<c>false</c>，当设置为
                <c>true</c> 时，如果尝试访问或设置超出数组长度的索引时，将自动进行补位 <c>null</c> 操作。
            </remarks>
        </member>
        <member name="P:Shapeless.ClayOptions.ValidateAfterConversion">
            <summary>
                是否应在转换后执行数据校验
            </summary>
            <remarks>当 <see cref="P:Shapeless.Clay.IsObject" /> 为 <c>true</c> 时有效。默认值为：<c>false</c>，表示不进行转换后的数据校验。</remarks>
        </member>
        <member name="P:Shapeless.ClayOptions.DateJsonToDateTime">
            <summary>
                控制是否将日期格式的 JSON 转换为 <see cref="T:System.DateTime" />
            </summary>
            <remarks>默认值为：<c>false</c>。</remarks>
        </member>
        <member name="P:Shapeless.ClayOptions.KeyValueJsonToObject">
            <summary>
                控制是否将键值对格式的 JSON 转换为单一对象
            </summary>
        </member>
        <member name="P:Shapeless.ClayOptions.PropertyNameCaseInsensitive">
            <summary>
                是否属性名称不区分大小写
            </summary>
            <remarks>
                <para>当 <see cref="P:Shapeless.Clay.IsObject" /> 为 <c>true</c> 时有效。默认值为：<c>false</c>，表示访问属性时使用的名称与属性名完全匹配。</para>
                <para>如果在对象初始化之后更改此属性，则会触发深度克隆操作，创建一个新对象以反映更改。</para>
            </remarks>
        </member>
        <member name="P:Shapeless.ClayOptions.PathSeparator">
            <summary>
                路径分隔符
            </summary>
            <remarks>默认值为：<c>:</c>。</remarks>
        </member>
        <member name="P:Shapeless.ClayOptions.ReadOnly">
            <summary>
                是否是只读模式
            </summary>
            <remarks>默认值为：<c>false</c>。</remarks>
        </member>
        <member name="P:Shapeless.ClayOptions.JsonSerializerOptions">
            <summary>
                JSON 序列化配置
            </summary>
        </member>
        <member name="M:Shapeless.ClayOptions.Configure(System.Action{Shapeless.ClayOptions})">
            <summary>
                自定义配置 <see cref="T:Shapeless.ClayOptions" /> 实例
            </summary>
            <param name="configure">自定义配置委托</param>
            <returns>
                <see cref="T:Shapeless.ClayOptions" />
            </returns>
        </member>
        <member name="T:Shapeless.PascalCaseNamingPolicy">
            <summary>
                帕斯卡（大驼峰）命名策略
            </summary>
        </member>
        <member name="M:Shapeless.PascalCaseNamingPolicy.ConvertName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Shapeless.PascalCaseNamingPolicy.WordBoundaryRegex">
            <remarks>
            Pattern:<br/>
            <code>(?&lt;=[A-Z])(?=[A-Z][a-z])|(?&lt;=[^A-Z])(?=[A-Z])|(?&lt;=[A-Za-z])(?=[^A-Za-z])|(?&lt;=\\d)(?=\\D)|(?&lt;=\\D)(?=\\d)</code><br/>
            Explanation:<br/>
            <code>
            ○ Match with 5 alternative expressions, atomically.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Zero-width positive lookbehind.<br/>
                        ○ Match a character in the set [A-Z] right-to-left.<br/>
                    ○ Zero-width positive lookahead.<br/>
                        ○ Match a character in the set [A-Z].<br/>
                        ○ Match a character in the set [a-z].<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Zero-width positive lookbehind.<br/>
                        ○ Match a character in the set [^A-Z] right-to-left.<br/>
                    ○ Zero-width positive lookahead.<br/>
                        ○ Match a character in the set [A-Z].<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Zero-width positive lookbehind.<br/>
                        ○ Match a character in the set [A-Za-z] right-to-left.<br/>
                    ○ Zero-width positive lookahead.<br/>
                        ○ Match a character in the set [^A-Za-z].<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Zero-width positive lookbehind.<br/>
                        ○ Match a Unicode digit right-to-left.<br/>
                    ○ Zero-width positive lookahead.<br/>
                        ○ Match any character other than a Unicode digit.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Zero-width positive lookbehind.<br/>
                        ○ Match any character other than a Unicode digit right-to-left.<br/>
                    ○ Zero-width positive lookahead.<br/>
                        ○ Match a Unicode digit.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:System.AliasAsAttribute">
            <summary>
                设置别名特性
            </summary>
        </member>
        <member name="M:System.AliasAsAttribute.#ctor(System.String)">
            <summary>
                <inheritdoc cref="T:System.AliasAsAttribute" />
            </summary>
            <param name="aliasAs">别名</param>
        </member>
        <member name="P:System.AliasAsAttribute.AliasAs">
            <summary>
                别名
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.WordBoundaryRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the WordBoundaryRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.WordBoundaryRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.WordBoundaryRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.WordBoundaryRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.WordBoundaryRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.WordBoundaryRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.WordBoundaryRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.WordBoundaryRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
    </members>
</doc>
